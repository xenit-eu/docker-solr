import com.avast.gradle.dockercompose.tasks.ComposeDown

subprojects {
    apply plugin: 'eu.xenit.docker'
    apply plugin: 'eu.xenit.docker-compose'


    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    def workingDir = "$project.buildDir/dockerbuild"

    task copyDockerfile(type: Copy) {
        from("$rootProject.projectDir/src/main/resources/dockerfiles/") {
            include "Dockerfile.${project.solr.flavor}"
            rename "Dockerfile.${project.solr.flavor}", 'Dockerfile'
        }
        into workingDir
    }
    task copyGlobalResources(type: Copy) {
        from "$rootProject.projectDir/src/main/resources/global"
        into workingDir
    }
    task copyLocalResources(type: Copy) {
        from "$project.projectDir/../local"
        into workingDir
    }
    task pullRuntimeDependencies(type: Copy) {
        from configurations.runtime
        into workingDir
    }
    buildDockerImage.dependsOn(copyGlobalResources)
    buildDockerImage.dependsOn(copyDockerfile)
    buildDockerImage.dependsOn(copyLocalResources)
    buildDockerImage.dependsOn(pullRuntimeDependencies)

    dockerFile {
        dockerFile = file("$workingDir/Dockerfile")
        dockerBuild {
            def enterprise = project.alfrescoimage.contains("enterprise")
            repository = [calcRepository(project.solr.flavor,enterprise,false)].get(0)
            tags = calcTags(project.solr.version)
            pull = true
            automaticTags = false
        }
    }

    buildDockerImage {
        def date = new Date().getTime().toString()
        buildArgs = [
                'SOLR_VERSION_MAJOR': "${project.solr.version.major}",
                'SOLR_VERSION_MINOR': "${project.solr.version.minor}",
                'SOLR_VERSION_REV'  : "${project.solr.version.rev}",
                'SOLR_FLAVOR'       : "${project.solr.flavor}",
                'BUILD_DATE'        : date.substring(0,date.length()-3)  // do not consider milliseconds
        ] << (project.hasProperty('extraBuildArgs')?project.extraBuildArgs:[:])
        if (project.solr.version.maint)
            buildArgs.put('SOLR_VERSION_MAINT', "${project.solr.version.maint}")
        doFirst {
            println buildArgs.get()
        }
    }

    afterEvaluate {
        if (project.hasProperty('testsSharded') && project.testsSharded)
            shardedComposeUp.dependsOn(buildDockerImage)
        else
            shardedComposeUp.enabled=false
        if (project.hasProperty('testsShardedNonSsl') && project.testsShardedNonSsl)
            shardedNonSslComposeUp.dependsOn(buildDockerImage)
        else
            shardedNonSslComposeUp.enabled=false
        if (project.hasProperty('testsNonSsl') && project.testsNonSsl)
            nonSslComposeUp.dependsOn(buildDockerImage)
        else
            nonSslComposeUp.enabled=false
        if (project.hasProperty('testsMounts') && project.testsMounts)
            mountsComposeUp.dependsOn(buildDockerImage)
        else
            mountsComposeUp.enabled=false

        // nested configurations do not get the DOCKER_IMAGE
        buildDockerImage {
            doLast {
                if (project.hasProperty('testsSharded'))
                    dockerCompose.sharded.environment.put 'DOCKER_IMAGE', getImageId().get()
                if (project.hasProperty('testsShardedNonSsl'))
                    dockerCompose.shardedNonSsl.environment.put 'DOCKER_IMAGE', getImageId().get()
                if (project.hasProperty('testsNonSsl'))
                    dockerCompose.nonSsl.environment.put 'DOCKER_IMAGE', getImageId().get()
                if (project.hasProperty('testsMounts'))
                    dockerCompose.mounts.environment.put 'DOCKER_IMAGE', getImageId().get()
            }
        }
    }


    task integrationTestDefault(type: Test, group: "verification") {
        enabled = (project.hasProperty('tests') && project.tests)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.exposeAsSystemProperties(integrationTestDefault)
            systemProperty("flavor", "${project.solr.flavor}")
            systemProperty("keystore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.keystore")
            systemProperty("truststore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.truststore")
        }
    }

    task integrationTestSharded(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsSharded') && project.testsSharded)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.sharded.exposeAsSystemProperties(integrationTestSharded)
            systemProperty("flavor", "${project.solr.flavor}")
            systemProperty("keystore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.keystore")
            systemProperty("truststore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.truststore")
        }
    }

    task integrationTestShardedNonSsl(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsShardedNonSsl') && project.testsShardedNonSsl)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.shardedNonSsl.exposeAsSystemProperties(integrationTestShardedNonSsl)
            systemProperty("flavor", "${project.solr.flavor}")
        }
    }

    task integrationTestNonSsl(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsNonSsl') && project.testsNonSsl)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.nonSsl.exposeAsSystemProperties(integrationTestNonSsl)
            systemProperty("flavor", "${project.solr.flavor}")
        }
    }

    task integrationTestMounts(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsMounts') && project.testsMounts)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.mounts.exposeAsSystemProperties(integrationTestMounts)
            systemProperty("flavor", "${project.solr.flavor}")
            systemProperty("keystore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.keystore")
            systemProperty("truststore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.truststore")
        }
    }

    task integrationTests(type: Test, group: "verification") {
        dependsOn integrationTestDefault
        dependsOn integrationTestSharded
        dependsOn integrationTestShardedNonSsl
        dependsOn integrationTestNonSsl
        dependsOn integrationTestMounts
    }

    dockerCompose {
        def composeDir = "${rootProject.projectDir}/src/integrationTest/resources";
        environment.put 'ALFRESCO_IMAGE', project.alfrescoimage
        environment.put 'INDEX', project.solr.flavor
        environment.put 'use_ssl', true

        isRequiredBy(project.tasks.integrationTestDefault)

        useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-solr.yml",
                           "$composeDir/docker-compose-db.yml"];

        sharded {
            isRequiredBy(project.tasks.integrationTestSharded)

            environment.put 'use_ssl', true

            if(project.hasProperty("license"))
                environment.put 'LICENSE', project.license

            useComposeFiles = ["$composeDir/docker-compose-alfresco-sharded.yml", "$composeDir/docker-compose-solr-sharded.yml",
                               "$composeDir/docker-compose-db.yml"];
        }

        shardedNonSsl {
            isRequiredBy(project.tasks.integrationTestShardedNonSsl)

            environment.put 'use_ssl', false

            if(project.hasProperty("license"))
                environment.put 'LICENSE', project.license

            useComposeFiles = ["$composeDir/docker-compose-alfresco-sharded-non-ssl.yml", "$composeDir/docker-compose-solr-sharded-non-ssl.yml",
                               "$composeDir/docker-compose-db.yml"];
        }

        nonSsl {
            isRequiredBy(project.tasks.integrationTestNonSsl)

            environment.put 'use_ssl', false

            useComposeFiles = ["$composeDir/docker-compose-alfresco-non-ssl.yml", "$composeDir/docker-compose-solr-non-ssl.yml",
                               "$composeDir/docker-compose-db.yml"];
        }

        mounts {
            isRequiredBy(project.tasks.integrationTestMounts)

            environment.put 'use_ssl', true

            useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-solr-with-mounts.yml",
                               "$composeDir/docker-compose-db.yml"];
        }
    }

    task composeDownAll {
        dependsOn project.tasks.withType(ComposeDown)
    }
}
