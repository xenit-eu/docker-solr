import com.avast.gradle.dockercompose.tasks.ComposeDown
import com.bmuschko.gradle.docker.tasks.image.Dockerfile.From

subprojects {
    apply plugin: 'eu.xenit.docker'
    apply plugin: 'eu.xenit.docker-compose'

    configurations {
        telemetry
        loggings
        actuators
        backup
    }

    ext {
        alfredTelemetryVersion = '0.10.1'
        actuatorsVersion = '0.0.7'
        solrBackupVersion = '0.0.11'
        composeDir = "${rootProject.projectDir}/src/integrationTest/resources";
        // atm test without ssl enabled
        tests_use_ssl = false
        composeFiles = ["$composeDir/docker-compose-alfresco-non-ssl.yml",
                        "$composeDir/docker-compose-solr-non-ssl.yml",
                        "$composeDir/docker-compose-db.yml"]
        solrSourceSetOverride = null
    }

    dependencies {
        loggings("eu.xenit.logging:json-logging:0.0.7:all")
        actuators("eu.xenit.solr-actuators:solr-actuators:${actuatorsVersion}")
        backup("eu.xenit.solr-backup:solr-backup:${solrBackupVersion}")
    }

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"


    def upstreamProjectName = ":upstream:${project.name}"
    def upstreamProject = project(upstreamProjectName)
    evaluationDependsOn(upstreamProjectName)
    def upstreamImage = upstreamProject.getTasks().getByName('buildDockerImage')
    buildDockerImage.dependsOn(upstreamImage)
    createDockerFile.dependsOn(upstreamImage)

    buildDockerImage {
        pull = false
    }

    dockerFile {
        dockerBuild {
            def enterprise = upstreamProject.alfrescoimage.contains("enterprise")
            repository = [calcRepository(upstreamProject.solr.flavor, enterprise, true)].get(0)
            tags = calcTags(upstreamProject.solr.version)
        }
    }


    createDockerFile {
        from(upstreamImage.getImageId().map({ new From(it) }))
        // micrometer handler init script
        smartCopy("${project.projectDir}/../local/94-init-solr-logging.sh", "/docker-entrypoint.d/")
        smartCopy("${project.projectDir}/../local/95-init-solr-micrometer-metrics.sh", "/docker-entrypoint.d/")
        // jmx needs to be enabled
        environmentVariable 'JMX_ENABLED', 'true'
        // telemetry
        environmentVariable 'METRICS_JETTY_ENABLED', 'true'
        smartCopy "${project.projectDir}/../local/solrconfig_insight.xml", "/opt/alfresco-search-services/solrhome/templates/rerank/conf/solrconfig_insight.xml"
        smartCopy "${project.projectDir}/../local/jetty.xml", "/opt/alfresco-search-services/solr/server/etc/jetty.xml"
        smartCopy "${project.projectDir}/../local/solr-jetty-context.xml", "/opt/alfresco-search-services/solr/server/contexts/solr-jetty-context.xml"
        smartCopy files(configurations.telemetry.files), "/opt/alfresco-search-services/solrhome/lib/"
        label([
                "eu.xenit.prometheus.metrics-path": "/solr/alfresco/metrics",
                "eu.xenit.prometheus.params"      : "wt: ['dummy']"
        ])
        // loggings
        smartCopy files(configurations.loggings.files), "/opt/alfresco-search-services/solr/server/lib/ext/"
        // actuators
        smartCopy files(configurations.actuators.files), "/opt/alfresco-search-services/solrhome/lib/"
        // backup
        smartCopy files(configurations.backup.files), "/opt/alfresco-search-services/solrhome/lib/"
        smartCopy("${project.projectDir}/../local/93-restore-from-backup.sh", "/docker-entrypoint.d/")
        smartCopy("${project.projectDir}/../local/solr.xml", "/opt/alfresco-search-services/solrhome/solr.xml")

        if (project.solrSourceSetOverride != null) {
            doFirst {
                println("The source code of the alfresco-search-*.jar will be overridden with code from (${project.solrSourceSetOverride}).")
            }
            runCommand('apt-get update -y && apt-get install zip -y')
            // Fail if the alfresco-search-*.jar is not found.
            runCommand('if [ -z $(ls /opt/alfresco-search-services/solr/server/solr-webapp/webapp/WEB-INF/lib/alfresco-search-*.jar) ]; then echo "Error: Alfresco Search jar not found"; exit 1; fi')
            // Unzip the alfresco-search-*.jar to /tmp/alfresco-search, so we can override the classes.
            runCommand('mkdir -p /tmp/alfresco-search')
            runCommand('cp /opt/alfresco-search-services/solr/server/solr-webapp/webapp/WEB-INF/lib/alfresco-search-*.jar /tmp/alfresco-search/temp.jar')
            runCommand('unzip -o /tmp/alfresco-search/temp.jar -d /tmp/alfresco-search')
            runCommand('rm -f /tmp/alfresco-search/temp.jar')
            // Override the classes in the alfresco-search-*.jar with the classes from the project. Custom source sets can be provided.
            project.solrSourceSetOverride.classesDirs.each { classesDir ->
                smartCopy(classesDir, "/tmp/alfresco-search/")
            }
            // Cleanup & copy the temp.jar to the original location.
            // Do not clean up the /tmp/alfresco-search directory, as it can be used to double-check the actual classes in the jar.
            runCommand('cd /tmp/alfresco-search && zip -r temp.jar *')
            runCommand('cp /tmp/alfresco-search/temp.jar $(ls /opt/alfresco-search-services/solr/server/solr-webapp/webapp/WEB-INF/lib/alfresco-search-*.jar)')
            runCommand('apt-get remove zip -y')
        }
    }

    task integrationTestXenitEndpoints(type: Test, group: "verification") {
        enabled = (project.hasProperty('tests') && project.tests)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.exposeAsSystemProperties(integrationTestXenitEndpoints)
            systemProperty("flavor", "${upstreamProject.solr.flavor}")
            systemProperty("telemetry", true)
            systemProperty("actuators", true)
            systemProperty("use_ssl", tests_use_ssl)
            systemProperty("keystore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.keystore")
            systemProperty("truststore", "${rootProject.projectDir}/src/main/resources/global/keystore/ssl.repo.client.truststore")
        }
    }

    task integrationTests(type: Test, group: "verification") {
        dependsOn integrationTestXenitEndpoints
    }

    dockerCompose {
        environment.put 'ALFRESCO_IMAGE', upstreamProject.alfrescoimage
        environment.put 'INDEX', upstreamProject.solr.flavor

        isRequiredBy(project.tasks.integrationTestXenitEndpoints)

        useComposeFiles = composeFiles
    }

    task composeDownAll {
        dependsOn project.tasks.withType(ComposeDown)
    }
}
