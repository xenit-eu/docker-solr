plugins {
    id "eu.xenit.docker-alfresco" version "4.1.1" apply false
}

import com.avast.gradle.dockercompose.tasks.ComposeDown

static def calcTags(version) {
    return [
            "${version.major}.${version.minor}.${version.rev}".toString(),
            "${version.major}.${version.minor}".toString()
    ];
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://artifacts.alfresco.com/nexus/content/repositories/public/'
        }
    }
    if (!project.hasProperty("repoName")) {
        ext.repoName = "hub.xenit.eu"
    }

}

buildAspects.subprojects {
    configurations {
        runtime
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    apply plugin: 'java'
    apply plugin: 'eu.xenit.docker'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDirs = ["${project.parent.projectDir}/src/integrationTest/java"]
            }
        }
    }

    dependencies {
        testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.1'
        testCompile group: 'io.rest-assured', name: 'json-path', version: '3.0.1'
        testCompile group: 'io.rest-assured', name: 'rest-assured-common', version: '3.0.1'
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    def workingDir = "$project.buildDir/dockerbuild"

    task copyDockerfile(type: Copy) {
        from("$project.parent.projectDir/src/main/resources/dockerfiles/") {
            include "Dockerfile.solr${buildVariant.solrVersion.solrVersion}"
            rename "Dockerfile.solr${buildVariant.solrVersion.solrVersion}", 'Dockerfile'
        }
        into workingDir
    }
    task copyGlobalResources(type: Copy) {
        from "$project.parent.projectDir/src/main/resources/global"
        into workingDir
    }
    task copyLocalResources(type: Copy) {
        from "$project.parent.projectDir/src/main/resources/init-script/92-init-solr.solr${buildVariant.solrVersion.solrVersion}.sh"
        rename "92-init-solr.solr${buildVariant.solrVersion.solrVersion}.sh", "92-init-solr.sh"
        into workingDir
    }
    task pullRuntimeDependencies(type: Copy) {
        from configurations.runtime
        into workingDir
    }
    buildDockerImage.dependsOn(copyGlobalResources)
    buildDockerImage.dependsOn(copyDockerfile)
    buildDockerImage.dependsOn(copyLocalResources)
    buildDockerImage.dependsOn(pullRuntimeDependencies)

    dockerFile {
        dockerFile = file("$workingDir/Dockerfile")
        dockerBuild {
            def namespace = buildVariant.enterpriseEdition ? "alfresco-enterprise" : "public";
            repository = ((repoName == "hub.xenit.eu") ?
                    "${repoName}" + "/" + namespace + "/" + "alfresco-solr${buildVariant.solrVersion.solrVersion}" :
                    "${repoName}" + "/" + "alfresco-solr${buildVariant.solrVersion.solrVersion}")
            tags = calcTags(project.solr.version)
            pull = true
            automaticTags = false
        }
    }

    buildDockerImage {
        def date = new Date().getTime().toString()

        buildArgs = [
                'SOLR_VERSION_MAJOR': "${project.solr.version.major}",
                'SOLR_VERSION_MINOR': "${project.solr.version.minor}",
                'SOLR_VERSION_REV'  : "${project.solr.version.rev}",
                'SOLR_FLAVOR'       : "solr${buildVariant.solrVersion.solrVersion}",
                'BUILD_DATE'        : date.substring(0, date.length() - 3)  // do not consider milliseconds
        ] << (project.hasProperty('extraBuildArgs') ? project.extraBuildArgs : [:])

        doFirst {
            println buildArgs.get()
        }
    }

    afterEvaluate {
        if (project.hasProperty('testsSharded') && project.testsSharded)
            shardedComposeUp.dependsOn(buildDockerImage)
        else
            shardedComposeUp.enabled = false
        if (project.hasProperty('testsNonSsl') && project.testsNonSsl)
            nonSslComposeUp.dependsOn(buildDockerImage)
        else
            nonSslComposeUp.enabled = false
        if (project.hasProperty('testsMounts') && project.testsMounts)
            mountsComposeUp.dependsOn(buildDockerImage)
        else
            mountsComposeUp.enabled = false

        // nested configurations do not get the DOCKER_IMAGE
        buildDockerImage {
            doLast {
                if (project.hasProperty('testsSharded'))
                    dockerCompose.sharded.environment.put 'DOCKER_IMAGE', getImageId().get()
                if (project.hasProperty('testsNonSsl'))
                    dockerCompose.nonSsl.environment.put 'DOCKER_IMAGE', getImageId().get()
                if (project.hasProperty('testsMounts'))
                    dockerCompose.mounts.environment.put 'DOCKER_IMAGE', getImageId().get()
            }
        }
    }


    task integrationTestDefault(type: Test, group: "verification") {
        enabled = (project.hasProperty('tests') && project.tests)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.exposeAsSystemProperties(integrationTestDefault)
            systemProperty("flavor", "solr${buildVariant.solrVersion.solrVersion}")
        }
    }

    task integrationTestSharded(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsSharded') && project.testsSharded)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.sharded.exposeAsSystemProperties(integrationTestSharded)
            systemProperty("flavor", "solr${buildVariant.solrVersion.solrVersion}")
        }
    }

    task integrationTestNonSsl(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsNonSsl') && project.testsNonSsl)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.nonSsl.exposeAsSystemProperties(integrationTestNonSsl)
            systemProperty("flavor", "solr${buildVariant.solrVersion.solrVersion}")
        }
    }

    task integrationTestMounts(type: Test, group: "verification") {
        enabled = (project.hasProperty('testsMounts') && project.testsMounts)

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        doFirst {
            dockerCompose.mounts.exposeAsSystemProperties(integrationTestMounts)
            systemProperty("flavor", "solr${buildVariant.solrVersion.solrVersion}")
        }
    }

    task integrationTests(type: Test, group: "verification") {
        dependsOn integrationTestDefault
        dependsOn integrationTestSharded
        dependsOn integrationTestNonSsl
        dependsOn integrationTestMounts
    }

    docker {
        if (System.getenv("DOCKER_USER") != null) {
            registryCredentials {
                username = System.getenv("DOCKER_USER")
                password = System.getenv("DOCKER_PASSWORD")
            }
        } else {
            logger.debug "using default credentials"
        }
    }

    dockerCompose {
        def composeDir = "${project.parent.projectDir}/src/integrationTest/resources";
        environment.put 'ALFRESCO_IMAGE', project.alfrescoimage
        if (buildVariant.solrVersion.solrVersion == 1)
            environment.put 'INDEX', "solr"
        else
            environment.put 'INDEX', "solr" + buildVariant.solrVersion.solrVersion

        isRequiredBy(project.tasks.integrationTestDefault)

        useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-solr.yml",
                           "$composeDir/docker-compose-db.yml"];

        sharded {
            isRequiredBy(project.tasks.integrationTestSharded)

            if (project.hasProperty("license"))
                environment.put 'LICENSE', project.license

            useComposeFiles = ["$composeDir/docker-compose-alfresco-sharded.yml", "$composeDir/docker-compose-solr-sharded.yml",
                               "$composeDir/docker-compose-db.yml"];
        }

        nonSsl {
            isRequiredBy(project.tasks.integrationTestNonSsl)

            useComposeFiles = ["$composeDir/docker-compose-alfresco-non-ssl.yml", "$composeDir/docker-compose-solr-non-ssl.yml",
                               "$composeDir/docker-compose-db.yml"];
        }

        mounts {
            isRequiredBy(project.tasks.integrationTestMounts)

            useComposeFiles = ["$composeDir/docker-compose-alfresco.yml", "$composeDir/docker-compose-solr-with-mounts.yml",
                               "$composeDir/docker-compose-db.yml"];
        }
    }

    task composeDownAll {
        dependsOn project.tasks.withType(ComposeDown)
    }
}
